# Copied from here:
# https://github.com/epinio/application/blob/main/config/crd/bases/application.epinio.io_apps.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: apps.application.epinio.io
spec:
  group: application.epinio.io
  names:
    kind: App
    listKind: AppList
    plural: apps
    singular: app
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: App is the Schema for the apps API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AppSpec defines the desired state of App
            properties:
              blobuid:
                description: BlobUID stores the blob uid that was used when the application
                  was last staged (from code). It can be empty if the application
                  was never staged (e.g. pushed with container image). Epinio will
                  use the value set by the user explicitly but if one is not set,
                  it will try to use the previously set blobUID from the application
                  CRD.
                type: string
              builderimage:
                description: This field stores the builder image that was used when
                  the application was last staged (from code). It can be empty if
                  the application was never staged (e.g. pushed with container image).
                  Epinio will use the builder image set by the user explicitly but
                  if one is not set, it will try to use the previously set image.
                type: string
              chartname:
                description: ChartName stores the name of the application support
                  chart used to deploy the currently running application. This is
                  set on deployment, for use in updates. The name references an epinio
                  AppCharts resource.
                type: string
              imageurl:
                description: ImageURL stores the image reference of the currently
                  running application. This is set on deployment, for use in updates.
                type: string
              origin:
                properties:
                  container:
                    type: string
                  git:
                    properties:
                      repository:
                        type: string
                      revision:
                        type: string
                    required:
                    - repository
                    type: object
                  path:
                    type: string
                type: object
              routes:
                items:
                  type: string
                type: array
              settings:
                additionalProperties:
                  type: string
                description: Settings stores the fields and values set by the user
                  to configure the application chart. See ChartName.
                type: object
              stageid:
                description: StageID stores the id of the latest attempt to stage
                  the application, regardless of outcome. This enables access to the
                  staging logs of an application which never staged successfully.
                type: string
            required:
            - origin
            type: object
          status:
            description: AppStatus defines the observed state of App
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
