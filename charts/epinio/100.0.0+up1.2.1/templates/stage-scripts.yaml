apiVersion: v1
kind: ConfigMap
metadata:
  name: epinio-stage-scripts
  namespace: {{ .Release.Namespace }}
data:
  builderImage:  "{{ template "registry-url" . }}{{ .Values.image.builder.repository}}:{{ .Values.image.builder.tag }}"
  downloadImage: "{{ template "registry-url" . }}{{ .Values.image.awscli.repository}}:{{ .Values.image.awscli.tag }}"
  unpackImage:   "{{ template "registry-url" . }}{{ .Values.image.bash.repository}}:{{ .Values.image.bash.tag }}"
  download: |-
    # Parameters
    # - PROTOCOL # s3 protocol
    # - ENDPOINT # s3 endpoint
    # - BUCKET   # s3 bucket
    # - BLOBID   # blob id / file name for source archive
    #
    # This data is set in the chart only for an external s3.  For
    # internal s3 the chart has no information.  Therefore we cannot
    # use helm templating to insert these.
    echo By _ _ __ ___ _____ $(whoami) $(pwd)
    cat /etc/ssl/certs/ca-bundle.crt               > /tmp/ca-bundle.pem
    test -f /certs/ca.crt   && cat /certs/ca.crt  >> /tmp/ca-bundle.pem
    test -f /certs/tls.crt  && cat /certs/tls.crt >> /tmp/ca-bundle.pem
    aws --ca-bundle /tmp/ca-bundle.pem --endpoint-url "${PROTOCOL}://${ENDPOINT}" s3 cp "s3://${BUCKET}/${BLOBID}" "/workspace/source/${BLOBID}"
    echo _ _ __ ___ _____ Done
  unpack: |-
    # Parameters
    # - BLOBID # blob id / file name for source archive
    #
    # Attempting to unpack the sources as, in order:
    #    .tar   - epinio cli
    #    .zip   - epinio UI
    # -z .tar.gz
    # -j .tar.bz2
    # -J .tar.xz
    #
    # __Note__: While it would have been nicer, IMNSHO, to use `file` to determine the
    # type of the file and then directly dispatch to the proper unpacker, the `file`
    # command is not available in the `bash` image. The code as written now relies on each
    # unpacker to recognize/reject input properly.
    #
    echo By _ _ __ ___ _____ $(whoami) $(pwd)
    if test ! -f "/workspace/source/${BLOBID}" ; then
      echo Nothing to unpack
      exit
    fi
    mkdir /workspace/source/app
    (  cd /workspace/source/app
       ( echo Tar? ; tar -xvf  "../${BLOBID}" ) || \
       ( echo Zip? ; unzip     "../${BLOBID}" ) || \
       ( echo Tgz? ; tar -xvzf "../${BLOBID}" ) || \
       ( echo Tbz? ; tar -xvjf "../${BLOBID}" ) || \
       ( echo Txz? ; tar -xvJf "../${BLOBID}" ) || \
       ( echo "Unable to unpack. No supported archive file format found" ; exit 1 )
       echo OK
    )
    rm "/workspace/source/${BLOBID}"
    mkdir -p /workspace/source/env
    cp -vL /workspace/source/appenv/* /workspace/source/env
    chown -R 1000:1000 /workspace 2> /dev/null
    find /workspace
    echo _ _ __ ___ _____ Done
  build: |-
    # Parameters
    # - PREIMAGE # url of previous image
    # - APPIMAGE # url of application image
    #
    # ATTENTION: The `curl localhost:4191` command is used to stop the linkerd proxy
    # container gracefully. We use `|| true` in case linkerd is not deployed.  Further, it
    # is placed into a trap to ensure that it will always run, even for a staging failure.
    # Error output generated when linkerd is not present/up is squashed (dev/null).
    # These messages are irrelevant, the situation is not an error, and allowing them through
    # would confuse users (readers of app staging logs).
    set -e
    trap "curl -X POST http://localhost:4191/shutdown 2> /dev/null || true" EXIT
    echo By _ _ __ ___ _____ $(whoami) $(pwd)
    if test ! -d "/workspace/source/app" ; then
      echo Nothing to build
      sleep 60 # linkerd is a pain - If we exit to quickly, with the sidecar not ready our curl to shut it down does nothing, and then the sidecar comes up and prevents the pod from ending
      exit 1
    fi
    find /workspace
    /cnb/lifecycle/creator \
      -app=/workspace/source/app \
      -cache-dir=/workspace/cache \
      -uid=1000 \
      -gid=1000 \
      -layers=/layers \
      -platform=/workspace/source \
      -report=/layers/report.toml \
      -process-type=web \
      -skip-restore=false \
      "-previous-image=${PREIMAGE}" \
      "${APPIMAGE}"
      echo _ _ __ ___ _____ Done
