---

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the s3gw.fullname template
  name: ""

# Ingress configuration.
ingress:
  # 'enabled' will deploy an ingress resource to the cluster if set to `true`.
  enabled: true

# Use cert-manager
useCertManager: true
# cert-manager namespace
certManagerNamespace: cert-manager
# The name of the predefined TLS issuer to use (s3gw-issuer, s3gw-letsencrypt-issuer).
tlsIssuer: "s3gw-issuer"
# The email address you are planning to use for getting notifications
# about your certificates. Fill this if you are using the 's3gw-letsencrypt-issuer'.
email: "epinio@suse.com"

# When not using cert-manager you have to manually specify
# TLS certificate/key pairs for all the services.
# Specify values in Base64 encoded in one line.
tls:
  publicDomain:
    crt: ""
    key: ""
  privateDomain:
    crt: ""
    key: ""
  ui:
    publicDomain:
      crt: ""
      key: ""

# S3 user interface
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Note, the UI will not be able to access the RGW AdminOps API when
# using HTTPS and self-signed certificates because of CORS issues.
# To workaround that, please open the URL https://<HOSTNAME> in the
# browser and accept the SSL certificate before accessing the UI
# via https://<UI-HOSTNAME>.
# Check https://github.com/aquarist-labs/s3gw/issues/31 to get more
# information about the CORS issues.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ui:
  # 'enabled' will deploy the S3GW user interface if set to `true`.
  enabled: true
  # 'serviceName' is the service name of the S3GW user interface.
  serviceName: "s3gw-ui"
  # 'publicDomain' is the public domain of the UI Service used by the Ingress.
  publicDomain: "fe.127.0.0.1.omg.howdoi.website"

  # --- Developer Options ---
  # imageName: "aquarist-labs/s3gw-ui"
  # imageTag: "v0.0.0"

# S3 Service
#
# 'serviceName' is the service name of S3GW.
serviceName: "s3gw"
# 'useExistingSecret' use an existing secret containing the S3 credentials
# for the default user
useExistingSecret: false
# 'defaultUserCredentialsSecret' the name of the secret containing
# the S3 Access Key and the S3 Secret Key for the default user.
defaultUserCredentialsSecret: "s3gw-creds"
# 'accessKey' is the S3 Access Key; the value is used when useExistingSecret: false.
# Set this as the empty string to make the Chart to compute a random alphanumeric value.
accessKey: "test"
# 'secretKey' is the S3 Secret Key; the value is used when useExistingSecret: false
# Set this as the empty string to make the Chart to compute a random alphanumeric value.
secretKey: "test"
# 'publicDomain' is the public domain of S3GW used by the Ingress
publicDomain: "be.127.0.0.1.omg.howdoi.website"
# 'privateDomain' is the private domain of S3GW used inside the Kubernetes cluster
privateDomain: "svc.cluster.local"

# Backing storage.
# Name the storage class to use. If create is true, an opinionated storage class
# will be created. This assumes the Longhorn storage driver is installed.
storageSize: 10Gi
storageClass:
  name: "longhorn-single"
  create: true
# For testing only:
#  local: false
#  localPath: /var/lib/local-storage

# --- Developer Options ---
#
# Image settings:
# imagePullPolicy: "Always"
# image.registry: ""
image:
  repository: "rancher/mirrored-s3gw-s3gw"
  tag: "v0.14.0"
# imageCredentials:
#   username: foo
#   password: bar
#   email: foobar@suse.com

# s3gw pod log level.
# Valid values are positive integers starting from 0.
# Higher values are more verbose.
logLevel: "1"
